# frozen_string_literal: true

require 'dry/monads/do'

<% module_namespacing do -%>
class <%= class_name %>
  send(:include, Dry::Monads[:result, :do])

  # @param [Hash] params the input parameters for {<%= class_name %>} operation
  # @option params [String] :description (optional)
  # @return [Dry::Monads::Result::Success] if operation was successful
  # @return [Dry::Monads::Result::Failure] if operation errored
  def call(params)
    # values = yield validate(params)
    # result = yield command(values)
    # event = yield publish_event(result)

    # Success(event)
  end

  private

  # Schema-validate the passed parameters.  This step is typically done when
  # parameters are first enter the Domain model
  # def validate(params)
  # end

  # Execute the command for this operation
  # def command(values)
  # end

  # Publish an event with the command output as the payload.
  # The event name usually is the operation/command name in past tense form
  # def publish_event(result)
  # end
end
<% end -%>
